--- burg-1.98.r1844-bzr/util/grub-mkconfig.in~	2011-04-19 13:24:17.176199143 +0200
+++ burg-1.98.r1844-bzr/util/grub-mkconfig.in	2011-04-19 13:30:04.389543848 +0200
@@ -287,14 +287,19 @@
 
 if test "x${grub_cfg}" != "x"; then
   rm -f ${grub_cfg}.new
+  # open fd &3 for diagnostic messages
+  exec 3>&1
   exec > ${grub_cfg}.new
 
   # Allow this to fail, since /boot/grub/ might need to be fatfs to support some
   # firmware implementations (e.g. OFW or EFI).
   chmod 400 ${grub_cfg}.new || grub_warn "Could not make ${grub_cfg}.new readable by only root.\
   This means that if the generated config contains a password it is readable by everyone"
+else
+  # open fd &3 for diagnostic messages
+  exec 3>&2
 fi
-echo "Generating burg.cfg ..." >&2
+echo "Generating burg.cfg ..." >&3
 
 cat << EOF
 #
@@ -319,4 +324,7 @@
   mv -f ${grub_cfg}.new ${grub_cfg}
 fi
 
-echo "done" >&2
+echo "done" >&3
+
+# close diagnostic stream
+exec 3>&-
--- burg-1.98.r1844-bzr/util/grub.d/10_linux.in~	2011-04-19 13:24:17.166199143 +0200
+++ burg-1.98.r1844-bzr/util/grub.d/10_linux.in	2011-04-19 13:31:36.136213508 +0200
@@ -111,7 +111,7 @@
 
 while [ "x$list" != "x" ] ; do
   linux=`version_find_latest $list`
-  echo "Found linux image: $linux" >&2
+  echo "Found linux image: $linux" >&3
   basename=`basename $linux`
   dirname=`dirname $linux`
   rel_dirname=`make_system_path_relative_to_its_root $dirname`
@@ -130,7 +130,7 @@
     fi
   done
   if test -n "${initrd}" ; then
-    echo "Found initrd image: ${dirname}/${initrd}" >&2
+    echo "Found initrd image: ${dirname}/${initrd}" >&3
   else
     # "UUID=" magic is parsed by initrds.  Since there's no initrd, it can't work here.
     linux_root_device_thisversion=${GRUB_DEVICE}
--- burg-1.98.r1844-bzr/util/grub.d/30_os-prober.in~	2011-04-19 13:24:17.166199143 +0200
+++ burg-1.98.r1844-bzr/util/grub.d/30_os-prober.in	2011-04-19 13:32:37.132882171 +0200
@@ -121,7 +121,7 @@
     OSLABEL="$s"
   fi
 
-  echo "Found ${LONGNAME} on ${DEVICE}" >&2
+  echo "Found ${LONGNAME} on ${DEVICE}" >&3
 
   case ${BOOT} in
     chain)
@@ -220,7 +220,7 @@
 EOF
     ;;
     *)
-      echo "  ${LONGNAME} is not yet supported by burg-mkconfig." >&2
+      echo "  ${LONGNAME} is not yet supported by burg-mkconfig." >&3
     ;;
   esac
 done
--- burg-1.98.r1844-bzr/util/grub.d/10_hurd.in~	2011-04-19 13:24:17.166199143 +0200
+++ burg-1.98.r1844-bzr/util/grub.d/10_hurd.in	2011-04-19 13:33:17.219550150 +0200
@@ -40,7 +40,7 @@
     basename=`basename $i`
     dirname=`dirname $i`
     rel_dirname=`make_system_path_relative_to_its_root $dirname`
-    echo "Found GNU Mach: $i" >&2
+    echo "Found GNU Mach: $i" >&3
     kernel=${rel_dirname}/${basename}
     at_least_one=true
   fi
@@ -54,7 +54,7 @@
 
 for i in /hurd/${hurd_fs}.static /hurd/exec ; do
   if test -e "$i" ; then
-    echo "Found Hurd module: $i" >&2
+    echo "Found Hurd module: $i" >&3
     at_least_one=true
   else
     all_of_them=false
--- burg-1.98.r1844-bzr/util/grub.d/10_windows.in~	2011-04-19 13:24:17.166199143 +0200
+++ burg-1.98.r1844-bzr/util/grub.d/10_windows.in	2011-04-19 13:33:54.756218045 +0200
@@ -68,7 +68,7 @@
   # Get boot /dev/ice.
   dev=`${grub_probe} -t device "$dir" 2>/dev/null` || continue
 
-  echo "Found $OS on $dir ($dev)" >&2
+  echo "Found $OS on $dir ($dev)" >&3
   cat << EOF
 menuentry "$OS" --class Windows {
 EOF
--- burg-1.98.r1844-bzr/util/grub.d/00_header.in~	2011-04-19 13:24:17.166199143 +0200
+++ burg-1.98.r1844-bzr/util/grub.d/00_header.in	2011-04-19 13:35:28.689554452 +0200
@@ -42,10 +42,10 @@
 
 if test "x${GRUB_USERS}" != "x" ; then
   if test ! -r $pass_file ; then
-    echo "Password file not found" >&2 ; exit 1
+    echo "Password file not found" >&3 ; exit 1
   fi
 
-  awk -F: 'BEGIN {super=""} {print "password_" $3,$1,$4; if ($2=="s") super=super $1 ",";} END {if (super=="") exit 1; else print "set superusers=" super;}' $pass_file || { echo "No superuser is found" >&2 ; exit 1; }
+  awk -F: 'BEGIN {super=""} {print "password_" $3,$1,$4; if ($2=="s") super=super $1 ",";} END {if (super=="") exit 1; else print "set superusers=" super;}' $pass_file || { echo "No superuser is found" >&3 ; exit 1; }
 fi
 
 default_theme="$(echo ${GRUB_DISTRIBUTOR} | tr '[A-Z]' '[a-z]' | cut -d' ' -f1)"
@@ -96,7 +96,7 @@
 
 if [ "x$serial" = x1 ]; then
     if ! test -e ${grub_prefix}/serial.mod ; then
-	echo "Serial terminal not available on this platform." >&2 ; exit 1
+	echo "Serial terminal not available on this platform." >&3 ; exit 1
     fi
 
     if [ "x${GRUB_SERIAL_COMMAND}" = "x" ] ; then
@@ -236,7 +236,7 @@
 EOF
     if [ "x$GRUB_THEME" != x ] && [ -f "$GRUB_THEME" ] \
 	&& is_path_readable_by_grub "$GRUB_THEME"; then
-	echo "Found theme: $GRUB_THEME" >&2
+	echo "Found theme: $GRUB_THEME" >&3
 	prepare_grub_to_access_device `${grub_probe} --target=device "$GRUB_THEME"` | sed -e "s/^/  /"
 	cat << EOF
   insmod gfxmenu
@@ -270,12 +270,12 @@
 EOF
     elif [ "x$GRUB_BACKGROUND" != x ] && [ -f "$GRUB_BACKGROUND" ] \
 	    && is_path_readable_by_grub "$GRUB_BACKGROUND"; then
-	echo "Found background: $GRUB_BACKGROUND" >&2
+	echo "Found background: $GRUB_BACKGROUND" >&3
 	case "$GRUB_BACKGROUND" in
 	    *.png)         reader=png ;;
 	    *.tga)         reader=tga ;;
 	    *.jpg|*.jpeg)  reader=jpeg ;;
-	    *)             echo "Unsupported image format" >&2; exit 1 ;;
+	    *)             echo "Unsupported image format" >&3; exit 1 ;;
 	esac
 	prepare_grub_to_access_device `${grub_probe} --target=device "$GRUB_BACKGROUND"` | sed -e "s/^/  /"
 	cat << EOF
--- burg-1.98.r1844-bzr/util/grub.d/10_kfreebsd.in~	2011-04-19 10:42:18.000000000 +0200
+++ burg-1.98.r1844-bzr/util/grub.d/10_kfreebsd.in	2011-04-19 13:36:11.892889198 +0200
@@ -82,7 +82,7 @@
 
 while [ "x$list" != "x" ] ; do
   kfreebsd=`version_find_latest $list`
-  echo "Found kernel of FreeBSD: $kfreebsd" >&2
+  echo "Found kernel of FreeBSD: $kfreebsd" >&3
   basename=`basename $kfreebsd`
   dirname=`dirname $kfreebsd`
   rel_dirname=`make_system_path_relative_to_its_root $dirname`
@@ -111,7 +111,7 @@
     fi
   done
   if test -n "${acpi_ko}" ; then
-    echo "Found ACPI module: ${acpi_ko}" >&2
+    echo "Found ACPI module: ${acpi_ko}" >&3
     acpi_ko_basename=`basename ${acpi_ko}`
     acpi_ko_dirname=`dirname ${acpi_ko}`
     acpi_ko_rel_dirname=`make_system_path_relative_to_its_root $acpi_ko_dirname`
